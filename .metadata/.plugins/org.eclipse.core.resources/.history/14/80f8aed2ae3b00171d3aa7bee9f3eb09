package antiXray;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import org.bukkit.Material;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;

public class AntiXrayListener implements Listener
{
	private AntiXray plugin;
	int[] tools = {257,270,274,278,285};
	SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
	

	public AntiXrayListener(AntiXray plugin)
	{
		this.plugin=plugin;
	}
	
	public boolean isExist(int number, int[] numberList)
	{
		for(int i=0; i<numberList.length; i++)
		{
			if(number==numberList[i])
			{
				return true;
			}
		}
		return false;
	}
	
	@EventHandler
	public void onPlayerJoin(PlayerJoinEvent event)
    {
		loadConfig(event.getPlayer());
		return;
    }
	
	@EventHandler
	public void onPlayerQuit(PlayerQuitEvent event)
    {
		Player p = event.getPlayer();
		File file=new File(plugin.getDataFolder(),"/data/"+p.getName()+".yml");
		FileConfiguration config;
		config = plugin.load(file);
		
		if(!plugin.playerData.isEmpty())
			config.set("AntiXray.Points", plugin.playerData.get(p.getName()));
		config.set("LastLogout", date.format(new Date()));
		try {
			config.save(file);
		} catch (IOException e) {
			e.printStackTrace();
		}

		return;
    }
	
	public void loadConfig(Player p)
	{
		File file=new File(plugin.getDataFolder(),"/data/"+p.getName()+".yml");
		FileConfiguration config;
		if (!file.exists())
		{
			config = plugin.load(file);
			
			config.set("AntiXray.Points", plugin.totalPoints);
			
			try 
			{
				config.save(file);
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			}
			loadConfig(p);
			return;
		}
		config = plugin.load(file);
		
		config.set("TodayDate", date.format(new Date()));
		try {
			config.save(file);
		} catch (IOException e) {
			e.printStackTrace();
		}

		if(config.getString("LastLogout")!=null)
		{
			if(!config.getString("LastLogout").equals(config.getString("TodayDate")))
			{
				config.set("AntiXray.Points", plugin.totalPoints);
			}
		}
		try {
			config.save(file);
		} catch (IOException e) {
			e.printStackTrace();
		}
		plugin.playerData.put(p.getName(), config.getInt("AntiXray.Points"));
	}
	
	@EventHandler
	public void onPlayerBreakBlock(BlockBreakEvent event)
	{

		if(event.getPlayer().hasPermission("antiXray.bypass"))
		{
			return;
		}
		
		if(event.getPlayer().hasPermission("antiXray.op"))
		{
			return;
		}
		
		if(event.getBlock().getLocation().getBlockY()>plugin.heightUnlimit)
		{
			return;
		}

		if(!plugin.blocks.containsKey(event.getBlock().getTypeId()))
		{
			return;
		}
		
		if(!isExist(event.getPlayer().getItemInHand().getTypeId(), tools))
		{
			return;
		}
		Player p = event.getPlayer();
		int blockID = event.getBlock().getTypeId();

		int currentPoint = plugin.playerData.get(p.getName());
		
		if(plugin.blocksForRecover.containsKey(blockID))
		{
			p.sendMessage("11");
			if(plugin.recoverBlock==true)
			{
				p.sendMessage("22");
				if(currentPoint+plugin.blocksForRecover.get(blockID)<=plugin.totalPoints)
				{
					p.sendMessage("33");
					currentPoint += plugin.blocksForRecover.get(blockID);
				}
			}
		}
		else
		{
			if((currentPoint-plugin.blocks.get(blockID))>=0)
			{
				currentPoint -= plugin.blocks.get(blockID);
			}
			else
			{
				event.setCancelled(true);
				p.sendMessage("§a[反透视系统] §3挖矿点数不足。您当前挖矿点数为§a"+currentPoint);;
				return;
			}
		}

		plugin.playerData.put(p.getName(), currentPoint);

	}
	
	@EventHandler
	public void onPlayerInteraction(PlayerInteractEvent event)
	{
		Action action = event.getAction();
		if(action == Action.RIGHT_CLICK_AIR || action == Action.RIGHT_CLICK_BLOCK)
		{
			Player p = event.getPlayer();
			ItemStack item = p.getItemInHand();
			if(item==null || item.getType()==Material.AIR)
				return;
			if(!item.hasItemMeta())
				return;
			if(!item.getItemMeta().hasLore())
				return;
			if(!item.getItemMeta().hasDisplayName())
				return;
			if(!item.getItemMeta().getDisplayName().equals(plugin.recoverItem.getItemMeta().getDisplayName()))
				return;
			if(!item.getItemMeta().getLore().equals(plugin.recoverItem.getItemMeta().getLore()))
				return;

			int currentPoint = plugin.playerData.get(p.getName());
			if(currentPoint>=plugin.totalPoints)
			{
				p.sendMessage("§a[反透视系统] §3你的挖矿点数已达上限");
				return;
			}
			
			if(currentPoint+plugin.recoverPoint>plugin.totalPoints)
			{
				currentPoint = plugin.totalPoints;
			}
			else
			{
				currentPoint += plugin.recoverPoint;
			}
			plugin.playerData.put(p.getName(), currentPoint);

			p.sendMessage("§a[反透视系统] §3你的挖矿点数增加了§a"+plugin.recoverPoint);
			if(item.getAmount()>1)
			{
				item.setAmount(item.getAmount()-1);
				p.setItemInHand(item);
			}
			else
			{
				p.setItemInHand(null);
			}
			
		}

	}
}
